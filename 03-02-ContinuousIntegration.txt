-----------------------------
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

-----------------------------
# This is a basic workflow to help you get started with Actions

name: Tests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run unit tests
        run: bash ./scripts/runTests.sh

-----------------------------
curl -L https://get.pharo.org/64/ | bash
./pharo --headless Pharo.image ./scripts/runTests.st

FILE=/tmp/result.txt
if [ ! -f "$FILE" ]; then
    echo "ERROR: $FILE does not exists!"
    exit 1
fi

# Print the result of the tests
cat $FILE

if grep -q ERROR "$FILE"; then
    echo "SOME ERRORS!"
    exit 1
else
    echo "ALL TEST PASSED"
    exit 0
fi

-----------------------------
"We capture all the unit tests in Pharo"
unitTestsBefore := TestCase withAllSubclasses.

"We load the application"
[ Metacello new
    baseline: 'ReinforcementLearning';
    repository: 'github://bergel/ReinforcementLearning:main';
    load ] on: MCMergeOrLoadWarning do: [ :warning | warning load ].

"We identify the unit tests contained in the loaded application"
unitTests := (TestCase withAllSubclasses copyWithoutAll: unitTestsBefore) sorted: [ :c1 :c2 | c1 name < c2 name ].

"We create a file that will contain the result of the test execution"
path := '/tmp/result.txt'.
path asFileReference exists ifTrue: [ path asFileReference delete ].
stream := path asFileReference writeStream.

"We run the unit tests"
unitTests do: [ :unitTestClass |
  res := unitTestClass buildSuite run.
  (res hasFailures or: [ res hasErrors ]) ifTrue: [ stream nextPutAll: 'ERROR: ' ].
  stream nextPutAll: unitTestClass name, ' ', res asString.
  stream crlf
].

"We close the stream and quit Pharo"
stream close.
SmalltalkImage current quitPrimitive

-----------------------------
[![Tests](https://github.com/bergel/ReinforcementLearning/actions/workflows/runTests.yml/badge.svg)](https://github.com/bergel/ReinforcementLearning/actions/workflows/runTests.yml)

-----------------------------
# This is a basic workflow to help you get started with Actions

name: UML Class diagram

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - name: Producing class diagram
        run: bash ./scripts/visualizeClassDiagram.sh
      - name: Push the picture
        run: |
          mkdir -p ci_data
          cd ci_data
          mv ../uml.png .
          git add uml.png
      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git diff-index --quiet HEAD || git commit -m "Add changes" -a
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

-----------------------------
curl -L https://get.pharo.org/64/alpha+vm | bash
./pharo --headless Pharo.image ./scripts/visualizeClassDiagram.st

-----------------------------
[ Metacello new
    baseline: 'Roassal3';
    repository: 'github://ObjectProfile/Roassal3';
    load: 'Full' ] on: MCMergeOrLoadWarning do: [:warning | warning load ].

[ Metacello new
    baseline: 'Roassal3Exporters';
    repository: 'github://ObjectProfile/Roassal3Exporters';
    load ] on: MCMergeOrLoadWarning do: [:warning | warning load ].

[ Metacello new
    baseline: 'ReinforcementLearning';
    repository: 'github://bergel/ReinforcementLearning:main';
    load ] on: MCMergeOrLoadWarning do: [:warning | warning load ].


packageName := 'ReinforcementLearning'.
uml := RSUMLClassBuilder new.
uml classes: (RPackageOrganizer default packageNamed: packageName) definedClasses.
uml build.

uml canvas extent: 1000 @ 1000.
RSPNGExporter new
  canvas: uml canvas;
  exportToFile: 'uml.png' asFileReference.

SmalltalkImage current quitPrimitive

-----------------------------
[![UML Class diagram](https://github.com/bergel/ReinforcementLearning/actions/workflows/visualizeClassDiagram.yml/badge.svg)](https://github.com/bergel/ReinforcementLearning/blob/main/ci_data/uml.png)

-----------------------------
# This is a basic workflow to help you get started with Actions

name: Visualize coverage

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      # Runs a single command using the runners shell
      - name: Run unit tests
        run: bash ./scripts/visualizeCoverage.sh

      - name: Push the picture
        run: |
          mkdir -p ci_data
          cd ci_data
          mv ../coverage.png .
          git add coverage.png
          cat /tmp/ratio
          wget "https://img.shields.io/badge/Coverage-`cat /tmp/ratio`-green"
          mv "Coverage-`cat /tmp/ratio`-green" coverageBadge.svg
          git add coverageBadge.svg
      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git diff-index --quiet HEAD || git commit -m "Add changes" -a
          git pull
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

-----------------------------
curl -L https://get.pharo.org/64/alpha+vm | bash
./pharo --headless Pharo.image ./scripts/visualizeCoverage.st

-----------------------------
"Loading all the tool suite"
[ Metacello new 
  baseline: 'Spy2'; 
  repository: 'github://ObjectProfile/Spy2'; 
  load: 'HapaoCore' ] on: MCMergeOrLoadWarning do: [:warning | warning load ].

[ Metacello new
    baseline: 'Roassal3';
    repository: 'github://ObjectProfile/Roassal3';
    load: 'Full' ] on: MCMergeOrLoadWarning do: [:warning | warning load ].

[ Metacello new
    baseline: 'Roassal3Exporters';
    repository: 'github://ObjectProfile/Roassal3Exporters';
    load ] on: MCMergeOrLoadWarning do: [:warning | warning load ].

[ Metacello new
    baseline: 'ReinforcementLearning';
    repository: 'github://bergel/ReinforcementLearning:main';
    load ] on: MCMergeOrLoadWarning do: [:warning | warning load ].


"Configuring the visualization"
shouldClassHaveName := true.
classNameHeight := 3.
packageNameAsRegExp := 'ReinforcementLearning*'.
numberOfMethodsToList := 10.

"Script that visualize the coverage"
profiler := 'Hapao2' asClass runTestsForPackagesMatching: packageNameAsRegExp.
classSizeScale := 'NSScale' asClass linear range: #(5 30); domain: { 0 . (profiler allClasses max: #numberOfMethods) }.
classColorCoverage := 'NSScale' asClass linear range: {Color red . Color black}; domain: { 0 . 100 }.
m := 'RSMondrian' asClass new.
m shape labeled: #packageName; color: Color white; borderColor: Color gray.
m nodes: profiler packages forEach: [ :pak |
  m shape box 
    size: [ :cls | classSizeScale scale: cls numberOfMethods ];
    color: [ :cls | classColorCoverage scale: cls coverage ];
    if: #isTestClass color: Color green darker.
  
  someBoxes := m nodes: pak classes.
  shouldClassHaveName ifTrue: [ someBoxes @ (RSLabeled new fontSize: classNameHeight) ].
  m orthoVerticalLine connectFrom: #superclass.
  m layout tidyTree
].
m build.

"Indicate the overall coverage"
lbl := RSLabel text: 'Ratio of covered methods = ', (profiler coverage asString), ' %'. 
RSLocation move: lbl above: m canvas nodes.
m canvas add: lbl.

"Show a few uncovered methods"
uncoveredMethods := profiler noncoveredMethods.
uncoveredMethods notEmpty ifTrue: [ 
  labels := RSLabel models: (uncoveredMethods copyFrom: 1 to: (uncoveredMethods size min: numberOfMethodsToList)).
  RSCellLayout new lineItemsCount: 2; on: labels.
  RSLocation move: labels below: m canvas nodes.
  labels translateBy: 0 @ 40.
  labels @ RSHighlightable red.
  m canvas addAll: labels.
  
  titleLabel := RSLabel new text: 'Some uncovered methods:'; color: Color black.
  m canvas add: titleLabel.
  RSLocation move: titleLabel above: labels.
].

"Exporting the picture"
m canvas extent: 1000 @ 1000.
RSPNGExporter new
  canvas: m canvas;
  exportToFile: 'coverage.png' asFileReference.

"We create a file that will contain the result of the test coverage"
path := '/tmp/ratio'.
path asFileReference exists ifTrue: [ path asFileReference delete ].
stream := path asFileReference writeStream.
stream nextPutAll: profiler coverage asString.
stream close.

"Quitting Pharo"
SmalltalkImage current quitPrimitive

-----------------------------
[![Coverage](https://raw.githubusercontent.com/bergel/ReinforcementLearning/main/ci_data/coverageBadge.svg)](https://github.com/bergel/ReinforcementLearning/blob/main/ci_data/coverage.png)

-----------------------------




