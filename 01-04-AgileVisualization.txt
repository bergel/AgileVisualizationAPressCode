
-----------------------------
"The variable classes contains the classes we would like to visualize"
classes := Collection withAllSubclasses.

"A canvas is a container of graphical shapes"
c := RSCanvas new.

"Each class is represented as a box"
classes do: [ :aClass | c add: (RSBox new model: aClass) ].

"The width of each class indicates the number of variables defined in the class"
RSNormalizer width shapes: c shapes; from: 6; to: 20; 
	normalize: #numberOfVariables.

"Height of each class represents the number of methods"
RSNormalizer height shapes: c shapes; normalize: #numberOfMethods.

"A class color goes from gray to red, indicating the number of lines of code"
RSNormalizer color shapes: c shapes;
	from: Color gray; to: Color red; normalize: #numberOfLinesOfCode.

"Vertical lines indicate the inheritance relationship"
RSLineBuilder orthoVertical 
	canvas: c; withVerticalAttachPoint; color: Color lightGray;
	connectFrom: #superclass.

"Use a tree layout to adequately locate the classes"
RSTreeLayout on: c nodes.

"We make all the classes draggable and with a contextual popup window"
c nodes @ RSDraggable @ RSPopup.

"The whole visualization is zoomable, draggable, and shapes may be searched in it"
c @ RSCanvasController.

-----------------------------
Class>>visualizeCallGraph
	"Visualize the call graph of the class' methods"
	| c eb shapes |
	shapes := RSBox models: self methods forEach: [ :box :cm | 
		box color: #blue ].
	RSNormalizer size shapes: shapes; normalize: #numberOfLinesOfCode.
	shapes @ (RSPopup text: #selector) @ RSDraggable.
	c := RSCanvas new.
	c addAll: shapes.
	eb := RSLineBuilder arrowedLineWithOffset: 0.2.
	eb moveBehind.
	eb shapes: c nodes.
	eb canvas: c.
	eb withVerticalAttachPoint.
	eb connectToAll: #dependentMethods.
	RSTreeLayout on: c nodes.
	shapes @ RSHighlightable withLines.
	^ c @ RSCanvasController

-----------------------------
Class>>>inspectorVisualization
	<inspectorPresentationOrder: 90 title: 'Callgraph'>	
	^ SpRoassal3InspectorPresenter new
		canvas: self visualizeCallGraph;
		yourself

-----------------------------
Class>>>inspectorVisualizationContext: aContext
	"Remove the evaluator pane"
	aContext withoutEvaluator
